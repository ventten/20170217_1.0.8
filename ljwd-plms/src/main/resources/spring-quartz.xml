<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
     xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 配置JobBean -->
    <bean id="mfbmsOverDueJobService" class="com.ljwd.plms.web.service.job.impl.MfbmsOverDueJobServiceImpl"/>
    <bean id="plmsDoOverdueDataService" class="com.ljwd.plms.web.service.job.impl.PlmsDoOverdueDataServiceImpl"/>
    <bean id="collectionRecordJobService" class="com.ljwd.plms.web.service.job.impl.CollectionRecordJobServiceImpl"/>
    <bean id="outsrcJobService" class="com.ljwd.plms.web.service.job.impl.OutsrcJobServiceImpl"/>
    <bean id="plmsOutVisitOverduedService" class="com.ljwd.plms.web.service.job.impl.PlmsOutVisitOverduedServiceImpl"/>
	<bean id="plmsDayIncomeService" class="com.ljwd.plms.web.service.job.impl.PlmsDayIncomeServiceImpl"/>

    <!-- 配置JobDetail：指定JobBean和Method -->
    <!-- 配置任务调度触发器JobTrigger:指定JobDetail和Cron表达式 -->

    <!-- 客户信息管理-将微贷系统逾期客户的全部信息导入系统 (每天0时3分0秒执行一次) -->
    <bean id="mfbmsOverDueJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
            p:targetObject-ref="mfbmsOverDueJobService" p:targetMethod="doMfbmsOverDueCust"/>
    <bean id="mfbmsOverDueJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"
          p:jobDetail-ref="mfbmsOverDueJobDetail" p:cronExpression="0 3 0 * * ?"/>

    <!-- 客户信息管理-将微贷系统贷款的状态同步到贷后系统 (每天0时2分0秒执行一次) -->
    <bean id="mfbmsApplyStatusJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
            p:targetObject-ref="mfbmsOverDueJobService" p:targetMethod="doMfbmsApplyStatus"/>
    <bean id="mfbmsApplyStatusJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"
          p:jobDetail-ref="mfbmsApplyStatusJobDetail" p:cronExpression="0 2 0 * * ?"/>

	<!-- 案件管理-将微贷逾期案件导入贷后系统，并进行自动分配 (每天凌晨1时0分0秒执行) -->
	<bean id="plmsDoOverdueJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
	            p:targetObject-ref="plmsDoOverdueDataService" p:targetMethod="doUpdateOverdueDatas"/>
	<bean id="plmsDoOverdueJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"
          p:jobDetail-ref="plmsDoOverdueJobDetail" p:cronExpression="0 0 1 * * ?"/>

	<!-- 案件催收-是否破坏承诺定时器 (每天凌晨0点10分执行) -->
	<bean id="collectionRecordJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
	            p:targetObject-ref="collectionRecordJobService" p:targetMethod="doBreakPromise"/>
	<bean id="collectionRecordJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"
          p:jobDetail-ref="collectionRecordJobDetail" p:cronExpression="0 10 0 * * ?"/>

	<!-- 委外管理-自动结案 (每天凌晨0点20分执行) -->
	<bean id="endedOutsrcJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
	            p:targetObject-ref="outsrcJobService" p:targetMethod="doEndedOutsrc"/>
	<bean id="endedOutsrcJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"
          p:jobDetail-ref="endedOutsrcJobDetail" p:cronExpression="0 20 0 * * ?"/>

	<!-- 委外管理-将同步失败的委外信息发送到微贷 (每半时执行一次) -->
	<bean id="sendOutsrcToMfbmsJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
	            p:targetObject-ref="outsrcJobService" p:targetMethod="doSendOutsrcToMfbms"/>
	<bean id="sendOutsrcToMfbmsJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"
          p:jobDetail-ref="sendOutsrcToMfbmsJobDetail" p:cronExpression="0 0/30 * * * ?"/>
       
    <!-- 外访管理-判断是否已委外,已过期 (每天凌晨2点30分执行，要在案件流转之后再执行)-->   
    <bean id="plmsOutVisitOverduedJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
	            p:targetObject-ref="plmsOutVisitOverduedService" p:targetMethod="updateOutVisitStatus"/>
	<bean id="plmsOutVisitOverduedJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"
          p:jobDetail-ref="plmsOutVisitOverduedJobDetail" p:cronExpression="0 30 2 * * ?"/>   

    <!-- 报表管理-统计昨日催收人员实收明细 (每天0时1分0秒执行一次) -->
    <bean id="plmsDayIncomeJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
            p:targetObject-ref="plmsDayIncomeService" p:targetMethod="updatePlmsLaIncome_yesterday"/>
    <bean id="plmsDayIncomeJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"
          p:jobDetail-ref="plmsDayIncomeJobDetail" p:cronExpression="0 1 0 * * ?"/>
    <!-- 报表管理-统计昨日外访人员实收明细 (每天0时5分0秒执行一次) -->
    <bean id="plmsDayIncomeOutVisitJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
            p:targetObject-ref="plmsDayIncomeService" p:targetMethod="updatePlmsLaIncomeOutVisitUser"/>
    <bean id="plmsDayIncomeOutVisitJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"
          p:jobDetail-ref="plmsDayIncomeOutVisitJobDetail" p:cronExpression="0 5 0 * * ?"/>
     
          
    <!-- 启动触发器的配置 -->
    <bean name="startQuertz" lazy-init="false" autowire="no" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="mfbmsOverDueJobTrigger"/>
                <ref bean="mfbmsApplyStatusJobTrigger"/>
                <ref bean="plmsDoOverdueJobTrigger"/>
                <ref bean="collectionRecordJobTrigger"/>
                <ref bean="endedOutsrcJobTrigger"/>
                <ref bean="sendOutsrcToMfbmsJobTrigger"/>
                <ref bean="plmsOutVisitOverduedJobTrigger"/>
                <ref bean="plmsDayIncomeJobTrigger"/>
                <ref bean="plmsDayIncomeOutVisitJobTrigger"/>
            </list>
        </property>
    </bean>

</beans>

<!--
            Cron Expressions
            cron的表达式被用来配置CronTrigger实例。cron的表达式是字符串，实际上是由七子表达式，描述个别细节的时间表。这些子表达式分别代表：
            1.        Seconds
            2.        Minutes
            3.        Hours
            4.        Day-of-Month
            5.        Month
            6.        Day-of-Week
            7.        Year (可选字段)
            例"0 0 12 ? * WED" 在每星期三下午12:00 执行,个别子表达式可以包含范围, 例如，在前面的例子里("WED")可以替换成 "MON-FRI", "MON, WED, FRI"甚至"MON-WED,SAT".
            “*” 代表整个时间段。每一个字段都有一套可以指定有效值，如
            Seconds (秒)    ：可以用数字0－59 表示，
            Minutes(分)     ：可以用数字0－59 表示，
            Hours(时)      ：可以用数字0-23表示,
            Day-of-Month(天)    ：可以用数字1-31 中的任一一个值，但要注意一些特别的月份
            Month(月)      ：可以用0-11 或用字符串“JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV，DEC”表示
            Day-of-Week(每周)：可以用数字1-7表示（1 ＝ 星期日）或用字符口串“SUN, MON, TUE, WED, THU, FRI，SAT”表示
            “/”：为特别单位，表示为“每”如“0/15”表示每隔15分钟执行一次,“0”表示为从“0”分开始, “3/20”表示每隔20分钟执行一次，“3”表示从第3分钟开始执行
            “?”：表示每月的某一天，或第周的某一天
            “L”：用于每月，或每周，表示为每月的最后一天，或每个月的最后星期几如“6L”表示“每月的最后一个星期五”
            “W”：表示为最近工作日，如“15W”放在每月（day-of-month）字段上表示为“到本月15日最近的工作日”
            ““#”：是用来指定“的”每月第n个工作日,例 在每周（day-of-week）这个字段中内容为"6#3" or "FRI#3" 则表示“每月第三个星期五”

            1）Cron表达式的格式：秒 分 时 日 月 周 年(可选)。
              字段名       允许的值          允许的特殊字符  
              秒        0-59            , - * /  
              分        0-59            , - * /  
              小时       0-23            , - * /  
              日        1-31            , - * ? / L W C  
              月        1-12 or JAN-DEC       , - * /  
             周几        1-7 or SUN-SAT       , - * ? / L C #  
             年 (可选字段)   empty, 1970-2099       , - * /

             “?”字符：表示不确定的值
             “,”字符：指定数个值
             “-”字符：指定一个值的范围
             “/”字符：指定一个值的增加幅度。n/m表示从n开始，每次增加m
             “L”字符：用在日表示一个月中的最后一天，用在周表示该月最后一个星期X
             “W”字符：指定离给定日期最近的工作日(周一到周五)
             “#”字符：表示该月第几个周X。6#3表示该月第3个周五

             2）Cron表达式范例：
             每隔5秒执行一次：*/5 * * * * ?
             每隔1分钟执行一次：0 */1 * * * ?
             每天23点执行一次：0 0 23 * * ?
             每天凌晨1点执行一次：0 0 1 * * ?
             每月1号凌晨1点执行一次：0 0 1 1 * ?
             每月最后一天23点执行一次：0 0 23 L * ?
             每周星期天凌晨1点实行一次：0 0 1 ? * L
             在26分、29分、33分执行一次：0 26,29,33 * * * ?
             每天的0点、13点、18点、21点都执行一次：0 0 0,13,18,21 * * ?
-->